{"/home/travis/build/npmtest/node-npmtest-cpr/test.js":"/* istanbul instrument in package npmtest_cpr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cpr/lib.npmtest_cpr.js":"/* istanbul instrument in package npmtest_cpr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cpr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cpr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cpr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cpr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cpr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cpr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cpr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cpr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cpr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cpr.__dirname + '/lib.npmtest_cpr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cpr/node_modules/cpr/lib/index.js":"/*\nCopyright (c) 2012, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://yuilibrary.com/license/\n*/\nvar fs = require('graceful-fs');\nvar Stack = require('./stack').Stack;\nvar path = require('path');\nvar rimraf = require('rimraf');\nvar mkdirp = require('mkdirp');\n\nvar getTree = function(from, options, callback) {\n    var stack = new Stack(),\n        errors = [],\n        results = {};\n\n    options.stats = options.stats || {};\n    options.toHash = options.toHash || {};\n\n    fs.readdir(from, stack.add(function(err, dirs) {\n        if (!dirs.length) {\n            results[from] = true;\n            fs.stat(from, stack.add(function(err, stat) {\n                /*istanbul ignore next*/\n                if (err) {\n                    return errors.push(err);\n                }\n                options.stats[from] = stat;\n                options.toHash[from] = path.join(options.to, path.relative(options.from, from));\n            }));\n        }\n        dirs.forEach(function (dir) {\n            var base = path.join(from, dir);\n            fs.stat(base, stack.add(function(err, stat) {\n                options.stats[base] = stat;\n                options.toHash[base] = path.join(options.to, path.relative(options.from, base));\n                /*istanbul ignore next*/\n                if (err) {\n                    return errors.push(err);\n                }\n                if (stat.isDirectory()) {\n                    getTree(base, options, stack.add(function(errs, tree) {\n                        /*istanbul ignore next*/\n                        if (errs && errs.length) {\n                            errs.forEach(function(item) {\n                                errors.push(item);\n                            });\n                        }\n                        //tree is always an Array\n                        tree.forEach(function(item) {\n                            results[item] = true;\n                        });\n                    }));\n                } else {\n                    results[base] = true;\n                }\n            }));\n        });\n    }));\n\n    stack.done(function() {\n        callback(errors, Object.keys(results).sort());\n    });\n};\n\nvar filterTree = function (tree, options, callback) {\n    var t = tree;\n    if (options.filter) {\n        if (typeof options.filter === 'function') {\n            t = tree.filter(options.filter);\n        } else if (options.filter instanceof RegExp) {\n            t = tree.filter(function(item) {\n                return !options.filter.test(item);\n            });\n        }\n    }\n    callback(null, t);\n};\n\nvar splitTree = function (tree, options, callback) {\n    var files = {},\n        dirs = {};\n\n    tree.forEach(function(item) {\n        var to = options.toHash[item];\n        if (options.stats[item] && options.stats[item].isDirectory()) {\n            dirs[item] = true;\n        } else {\n            dirs[path.dirname(item)] = true;\n            options.stats[path.dirname(item)] = fs.statSync(path.dirname(item));\n            options.toHash[path.dirname(item)] = path.dirname(to);\n        }\n    });\n\n    tree.forEach(function(item) {\n        if (!dirs[item]) {\n            files[item] = true;\n        }\n    });\n\n    callback(Object.keys(dirs).sort(), Object.keys(files).sort());\n};\n\n\nvar createDirs = function(dirs, to, options, callback) {\n    var stack = new Stack();\n\n    dirs.forEach(function(dir) {\n        var stat = options.stats[dir],\n            to = options.toHash[dir];\n\n        /*istanbul ignore else*/\n        if (to && typeof to === 'string') {\n            fs.stat(to, stack.add(function(err, s) {\n                if (s && !s.isDirectory()) {\n                    options.errors.push(new Error(to + ' exists and is not a directory, can not create'));\n                } else {\n                    mkdirp(to, stat.mode, stack.add(function(err) {\n                        /*istanbul ignore next*/\n                        if (err) {\n                            options.errors.push(err);\n                        }\n                    }));\n                }\n            }));\n        }\n    });\n\n    stack.done(function() {\n        callback();\n    });\n};\n\nvar copyFile = function(from, to, options, callback) {\n    var dir = path.dirname(to);\n    mkdirp(dir, function() {\n        fs.stat(to, function(statError) {\n            if(!statError && options.overwrite !== true) {\n              return callback(new Error('File '+to+' exists'));\n            }\n\n            var fromFile = fs.createReadStream(from),\n                toFile = fs.createWriteStream(to),\n                err,\n                called = false,\n                cb = function(e) {\n                    if (!called) {\n                        callback(e);\n                        called = true;\n                    }\n                },\n                onError = function (e) {\n                    /*istanbul ignore next*/\n                    err = e;\n                    cb(e);\n                };\n\n            fromFile.on('error', onError);\n            toFile.on('error', onError);\n            fromFile.once('end', function() {\n                cb(err);\n            });\n            fromFile.pipe(toFile);\n        });\n    });\n};\n\nvar createFiles = function(files, to, options, callback) {\n    var next = process.nextTick,\n        complete = 0,\n        count = files.length,\n        check = function() {\n            /*istanbul ignore else - Shouldn't need this if graceful-fs does it's job*/\n            if (count === complete) {\n                callback();\n            }\n        },\n        copy = function() {\n            var from = files.pop(),\n                to = options.toHash[from],\n                bail;\n            if (!from) {\n                return check();\n            }\n            copyFile(from, to, options, function(err) {\n                /*istanbul ignore next*/\n                //This shouldn't happen with graceful-fs, but just in case\n                if (/EMFILE/.test(err)) {\n                    bail = true;\n                    files.push(from);\n                } else if (err) {\n                    options.errors.push(err);\n                }\n                /*istanbul ignore next*/\n                if (!bail) {\n                    complete++;\n                }\n                next(copy);\n            });\n        };\n\n    copy();\n};\n\nvar confirm = function(files, options, callback) {\n    var stack = new Stack(),\n        errors = [],\n        f = [],\n        filtered = files;\n\n    if (options.filter) {\n        if (typeof options.filter === 'function') {\n            filtered = files.filter(options.filter);\n        } else if (options.filter instanceof RegExp) {\n            filtered = files.filter(function(item) {\n                return !options.filter.test(item);\n            });\n        }\n    }\n\n    /*istanbul ignore else - filtered should be an array, but just in case*/\n    if (filtered.length) {\n        filtered.forEach(function(file) {\n            fs.stat(file, stack.add(function(err, stat) {\n                /*istanbul ignore next*/\n                if (err) {\n                    errors.push(err);\n                } else {\n                    if (stat && (stat.isFile() || stat.isDirectory())) {\n                        f.push(file);\n                    }\n                }\n            }));\n        });\n    }\n\n    stack.done(function() {\n        /*istanbul ignore next */\n        callback(((errors.length) ? errors : null), f.sort());\n    });\n};\n\nvar cpr = function(from, to, opts, callback) {\n    if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n    }\n\n    var options = {},\n        proc;\n\n    Object.keys(opts).forEach(function(key) {\n        options[key] = opts[key];\n    });\n\n    options.from = from;\n    options.to = to;\n    options.errors = [];\n\n    proc = function() {\n        getTree(options.from, options, function(err, tree) {\n            filterTree(tree, options, function(err, t) {\n                splitTree(t, options, function(dirs, files) {\n                    if (!dirs.length && !files.length) {\n                        return callback(new Error('No files to copy'));\n                    }\n                    createDirs(dirs, to, options, function() {\n                        createFiles(files, to, options, function() {\n                            var out = [], err;\n                            Object.keys(options.toHash).forEach(function(k) {\n                                out.push(options.toHash[k]);\n                            });\n                            if (options.confirm) {\n                                confirm(out, options, callback);\n                            } else if (!options.errors.length) {\n                                callback(null, out.sort());\n                            } else {\n                                /*istanbul ignore next*/\n                                err = new Error('Unable to copy directory' + (out.length ? ' entirely' : ''));\n                                /*istanbul ignore next*/\n                                err.list = options.errors;\n                                /*istanbul ignore next*/\n                                callback(err, out.sort());\n                            }\n                        });\n                    });\n                });\n            });\n        });\n    };\n\n    fs.stat(options.from, function(err, stat) {\n        if (err) {\n            return callback(new Error('From should be a file or directory'));\n        }\n        if (stat && stat.isDirectory()) {\n            if (options.deleteFirst) {\n                rimraf(to, function() {\n                    proc();\n                });\n            } else {\n                proc();\n\n            }\n        } else {\n            if (stat.isFile()) {\n                var dirRegex = new RegExp(path.sep + '$');\n                if (dirRegex.test(to)) { // Create directory if has trailing separator\n                  to = path.join(to, path.basename(options.from));\n                }\n                return copyFile(options.from, to, options, callback);\n            }\n            callback(new Error('From should be a file or directory'));\n        }\n    });\n};\n\n//Preserve backward compatibility\ncpr.cpr = cpr;\n//Export a function\nmodule.exports = cpr;\n","/home/travis/build/npmtest/node-npmtest-cpr/node_modules/cpr/lib/stack.js":"/*\nCopyright (c) 2012, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://yuilibrary.com/license/\n*/\nvar Stack = function () {\n    this.errors   = [];\n    this.finished = 0;\n    this.results  = [];\n    this.total    = 0;\n};\n\nStack.prototype = {\n    add: function (fn) {\n        var self  = this,\n            index = self.total;\n\n        self.total += 1;\n\n        return function (err) {\n            if (err) { self.errors[index] = err; }\n\n            self.finished += 1;\n            self.results[index] = fn.apply(null, arguments);\n            self.test();\n        };\n    },\n\n    test: function () {\n        if (this.finished >= this.total && this.callback) {\n            this.callback.call(null, this.errors.length ? this.errors : null,\n                    this.results, this.data);\n        }\n    },\n\n    done: function (callback, data) {\n        this.callback = callback;\n        this.data     = data;\n        this.test();\n    }\n};\n\nexports.Stack = Stack;\n\n"}